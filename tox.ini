[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, unit

[vars]
src_path = {toxinidir}/src/
tst_path = {toxinidir}/tests/
all_path = {[vars]src_path} {[vars]tst_path} 
lxd_name = parca-func-test
ftest_path = {toxinidir}/tests/functional

[testenv]
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_path}
    black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    flake8
    flake8-docstrings
    flake8-copyright
    flake8-builtins
    pyproject-flake8
    pep8-naming
    isort
    codespell
commands =
    # uncomment the following line if this charm owns a lib
    # codespell {[vars]lib_path}
    codespell {toxinidir}/. --skip {toxinidir}/.git --skip {toxinidir}/.tox \
      --skip {toxinidir}/build --skip {toxinidir}/lib --skip {toxinidir}/venv \
      --skip {toxinidir}/.mypy_cache --skip {toxinidir}/icon.svg
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path}
    isort --check-only --diff {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:unit]
description = Run unit tests
deps =
    pytest
    coverage[toml]
    -r{toxinidir}/requirements.txt
    pyfakefs
commands =
    coverage run --source={[vars]src_path} \
        -m pytest --ignore={[vars]tst_path}integration --ignore={[vars]tst_path}functional -v --tb native -s {posargs}
    coverage report

[testenv:functional]
description = Build a LXD container for functional tests then run the tests
allowlist_externals = 
    lxc
    bash
commands =
    # Create a LXC container with the relevant packages installed
    bash -c 'lxc launch -qe ubuntu:focal {[vars]lxd_name} -c=user.user-data="$(<{[vars]ftest_path}/test_setup.yaml)"'
    # Wait for the cloud-init process to finish
    lxc exec {[vars]lxd_name} -- bash -c "cloud-init status -w >/dev/null 2>&1"
    # Copy all the files needed for integration testing
    lxc file push -qp {toxinidir}/tox.ini {[vars]lxd_name}/{[vars]lxd_name}/
    lxc file push -qp {toxinidir}/pyproject.toml {[vars]lxd_name}/{[vars]lxd_name}/
    lxc file push -qpr {toxinidir}/lib {[vars]lxd_name}/{[vars]lxd_name}/
    lxc file push -qpr {toxinidir}/src {[vars]lxd_name}/{[vars]lxd_name}/
    lxc file push -qpr {[vars]tst_path} {[vars]lxd_name}/{[vars]lxd_name}/
    # Run the tests
    lxc exec {[vars]lxd_name} -- tox -c /{[vars]lxd_name}/tox.ini -e functional-tests {posargs}
commands_post =
    -lxc stop {[vars]lxd_name}

[testenv:functional-tests]
description = Run functional tests
deps =
    pytest
    ops
    jinja2
commands =
    pytest -v --tb native --ignore={[vars]tst_path}unit --ignore={[vars]tst_path}integration --log-cli-level=INFO -s {posargs}

[testenv:integration]
description = Run integration tests
deps =
    pytest
    juju
    pytest-operator
    tenacity
    requests
    -r{toxinidir}/requirements.txt
commands =
    pytest -v --tb native -s \
        --ignore={[vars]tst_path}unit \
        --ignore={[vars]tst_path}functional \
        --log-cli-level=INFO \
        --model controller \
        --keep-models \
        {posargs}