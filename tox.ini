[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = fmt, lint, unit

[vars]
src_path = {toxinidir}/src/
tst_path = {toxinidir}/tests/
lib_path = {toxinidir}/lib/charms/parca/
all_path = {[vars]src_path} {[vars]tst_path}  {[vars]lib_path} 
lxd_name = parca-func-test
ftest_path = {toxinidir}/tests/functional

[testenv]
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS

[testenv:fmt]
description = Apply coding style standards to code
deps =
    # renovate: datasource=pypi
    ruff==0.2.2
commands =
    ruff --fix {[vars]all_path}
    ruff format {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    # renovate: datasource=pypi
    ruff==0.2.2
    # renovate: datasource=pypi
    codespell==2.2.6
commands =
    # uncomment the following line if this charm owns a lib
    codespell {[vars]lib_path}
    codespell {toxinidir}
    ruff {[vars]all_path}
    ruff format --check --diff {[vars]all_path}

[testenv:unit]
description = Run unit tests
deps =
    -r{toxinidir}/requirements.txt
    # renovate: datasource=pypi
    cosl==0.0.12
    # renovate: datasource=pypi
    pytest==8.0.2
    # renovate: datasource=pypi
    coverage[toml]==6.5.0
commands =
    coverage run --source={[vars]src_path},{[vars]lib_path} \
                 -m pytest \
                 --ignore={[vars]tst_path}integration \
                 --ignore={[vars]tst_path}functional \
                 --tb native \
                 -v \
                 -s \
                 {posargs}
    coverage report

[testenv:functional]
description = Build a LXD container for functional tests then run the tests
allowlist_externals = 
    lxc
    bash
commands =
    # Create a LXC container with the relevant packages installed
    bash -c 'lxc launch -qe ubuntu:jammy {[vars]lxd_name} -c=user.user-data="$(<{[vars]ftest_path}/test_setup.yaml)"'
    # Wait for the cloud-init process to finish
    lxc exec {[vars]lxd_name} -- bash -c "cloud-init status -w >/dev/null 2>&1"
    # Copy all the files needed for integration testing
    lxc file push -qp {toxinidir}/tox.ini {[vars]lxd_name}/{[vars]lxd_name}/
    lxc file push -qp {toxinidir}/pyproject.toml {[vars]lxd_name}/{[vars]lxd_name}/
    lxc file push -qp {toxinidir}/config.yaml {[vars]lxd_name}/{[vars]lxd_name}/
    lxc file push -qpr {toxinidir}/lib {[vars]lxd_name}/{[vars]lxd_name}/
    lxc file push -qpr {toxinidir}/src {[vars]lxd_name}/{[vars]lxd_name}/
    lxc file push -qpr {[vars]tst_path} {[vars]lxd_name}/{[vars]lxd_name}/
    # Run the tests
    lxc exec {[vars]lxd_name} -- tox -c /{[vars]lxd_name}/tox.ini -e functional-tests {posargs}
commands_post =
    -lxc stop {[vars]lxd_name}

[testenv:functional-tests]
description = Run functional tests
deps =
    # renovate: datasource=pypi
    ops==2.10.0
    # renovate: datasource=pypi
    pytest==8.0.2
commands =
    pytest -v \
           -s \
           --tb native \
           --ignore={[vars]tst_path}unit \
           --ignore={[vars]tst_path}integration \
           --log-cli-level=INFO \
           {posargs}

[testenv:integration]
description = Run integration tests
deps =
    -r{toxinidir}/requirements.txt
    # renovate: datasource=pypi
    juju==3.3.1.1
    # Pin macaroonbakery due to an issue in 1.3.3 (libjuju depends on this)
    macaroonbakery==1.3.2
    # renovate: datasource=pypi
    pytest==8.0.2
    # Renovate disabled due to issue where later versions drop
    # asyncio_event_loop
    pytest-asyncio==0.21.1
    # renovate: datasource=pypi
    pytest-operator==0.33.0
    # renovate: datasource=pypi
    tenacity==8.2.3
    # renovate: datasource=pypi
    requests==2.31.0
commands =
    pytest -v \
           -s \
           --tb native \
           --ignore={[vars]tst_path}unit \
           --ignore={[vars]tst_path}functional \
           --log-cli-level=INFO \
           --model controller \
           --keep-models \
           {posargs}
